generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model achievements {
  achievement_id          String  @id @default(uuid())
  team_id                 String?
  achievement_name        String  @db.VarChar(255)
  achievement_description String?
  image_link              String?
  useful_link             String?
  teams                   teams?  @relation(fields: [team_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction)
}

model answers {
  answer_id   String    @id @default(uuid())
  issue_id    String?
  user_id     String?
  answer_text String?
  timestamp   DateTime? @default(now()) @db.Timestamp(6)
  votes       Int?      @default(0)
  is_accepted Boolean?  @default(false)
  issues      issues?   @relation(fields: [issue_id], references: [issue_id], onDelete: NoAction, onUpdate: NoAction)
  users       users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model collaboration_request_reviews {
  review_id                                                  String                  @id @default(uuid())
  request_id                                                 String?
  reviewer_id                                                String?
  collaborator_id                                            String?
  review_status                                              String?                 @db.VarChar(20)
  comments                                                   String?
  timestamp                                                  DateTime?               @default(now()) @db.Timestamp(6)
  users_collaboration_request_reviews_collaborator_idTousers users?                  @relation("collaboration_request_reviews_collaborator_idTousers", fields: [collaborator_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  collaboration_requests                                     collaboration_requests? @relation(fields: [request_id], references: [request_id], onDelete: NoAction, onUpdate: NoAction)
  users_collaboration_request_reviews_reviewer_idTousers     users?                  @relation("collaboration_request_reviews_reviewer_idTousers", fields: [reviewer_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model collaboration_requests {
  request_id                    String                          @id @default(uuid())
  room_id                       String?
  user_id                       String?
  request_text                  String?
  domain_expertise_required     String?
  status                        String?                         @db.VarChar(20)
  timestamp                     DateTime?                       @default(now()) @db.Timestamp(6)
  collaboration_request_reviews collaboration_request_reviews[]
  rooms                         rooms?                          @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction)
  users                         users?                          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model comments {
  comment_id    String          @id @default(uuid())
  parent_id     String?
  user_id       String?
  comment_text  String?
  timestamp     DateTime?       @default(now()) @db.Timestamp(6)
  votes         Int?            @default(0)
  users         users?          @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  idea_comments idea_comments[]
}

model features {
  feature_id      String    @id @default(uuid())
  feature_name    String    @db.VarChar(100)
  feature_details String?
  project_id      String?
  projects        projects? @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  steps           steps[]
}

model ideas {
  idea_id          String             @id @default(uuid())
  user_id          String?
  idea_name        String?
  idea_text        String?
  usefull_links    String[]
  image_link       String[]
  video_link       String[]
  roomId           String
  timestamp        DateTime?          @default(now()) @db.Timestamp(6)
  users            users?             @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  idea_impressions idea_impressions[]
  idea_comments    idea_comments[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  roomDetails      rooms?             @relation(fields: [roomId], references: [room_id], onDelete: NoAction, onUpdate: NoAction)
}

model institutions {
  institution_id          String                    @id @default(uuid())
  name                    String                    @db.VarChar(255)
  address                 String?
  InstitutionVerification InstitutionVerification[]
}

model interests {
  interest_id    String           @id @default(uuid())
  interest_name  String           @unique @db.VarChar(100)
  user_interests user_interests[]
}

model issue_tags {
  issue_tag_id String  @id @default(uuid())
  issue_id     String?
  tag_id       String?
  issues       issues? @relation(fields: [issue_id], references: [issue_id], onDelete: NoAction, onUpdate: NoAction)
  tags         tags?   @relation(fields: [tag_id], references: [tag_id], onDelete: NoAction, onUpdate: NoAction)
}

model issues {
  issue_id    String       @id @default(uuid())
  user_id     String?
  title       String       @db.VarChar(255)
  description String?
  timestamp   DateTime?    @default(now()) @db.Timestamp(6)
  status      String?      @db.VarChar(20)
  votes       Int?         @default(0)
  answers     answers[]
  issue_tags  issue_tags[]
  users       users?       @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model languages {
  language_id           String                  @id @default(uuid())
  language_name         String                  @unique @db.VarChar(50)
  project_used_language project_used_language[]
}

model mentors {
  mentor_id      String     @id @default(uuid())
  mentor_name    String     @db.VarChar(255)
  mentor_details String?
  projects       projects[]
}

model projects {
  project_id              String                    @id @default(uuid())
  project_type            String?
  description             String?
  project_name            String?                   @db.VarChar(255)
  duration                String?                   @db.VarChar(50)
  mentor_details          String?
  reference_text          String?
  demo_link               String?
  features                features[]
  mentors                 mentors?                  @relation(fields: [mentor_details], references: [mentor_id], onDelete: NoAction, onUpdate: NoAction)
  team_project_record     team_project_record[]
  user_project_track      user_project_track[]
  project_components_used project_components_used[]
  project_used_language   project_used_language[]
  project_used_software   project_used_software[]
  project_impressions     project_impressions[]
}

model roles {
  role_id String  @id @default(uuid())
  label   String  @unique @db.VarChar(50)
  users   users[]
}

model room_member {
  id        String  @id @default(uuid())
  room_id   String?
  user_id   String?
  role_name String? @db.VarChar(50)
  rooms     rooms?  @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction)
  users     users?  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model room_task_list {
  room_task_id        String    @id @default(uuid())
  room_id             String?
  task_title          String    @db.VarChar(255)
  task_description    String?
  due_date            DateTime? @db.Date
  status              String?   @db.VarChar(20)
  assigned_to_user_id String?
  users               users?    @relation(fields: [assigned_to_user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  rooms               rooms?    @relation(fields: [room_id], references: [room_id], onDelete: NoAction, onUpdate: NoAction)
}

model rooms {
  room_id          String           @id @default(uuid())
  room_name        String           @db.VarChar(255)
  objective        String?
  owner_id         String
  profile_pic_link String?
  room_member      room_member[]
  room_task_list   room_task_list[]
  owner            users            @relation(fields: [owner_id], references: [user_id])
  createdAt        DateTime         @default(now())
  updatedAt        DateTime         @updatedAt
  ideas            ideas[]
  update           update[]

  collaboration_requests collaboration_requests[]
  init_feature_list      init_feature_list[]
  New_Project_table      New_Project_table[]
}

model skills {
  skill_id    String        @id @default(uuid())
  skill_name  String        @unique @db.VarChar(100)
  user_skills user_skills[]
}

model software {
  id                    String                  @id @default(uuid())
  name                  String                  @unique @db.VarChar(100)
  image_link            String?
  project_used_software project_used_software[]
}

model steps {
  step_id     String    @id @default(uuid())
  input       String?
  process     String?
  output      String?
  useful_link String[]
  features_id String?
  features    features? @relation(fields: [features_id], references: [feature_id], onDelete: NoAction, onUpdate: NoAction)
}

model tags {
  tag_id     String       @id @default(uuid())
  tag_name   String       @unique @db.VarChar(50)
  issue_tags issue_tags[]
}

model team_member_roles {
  member_role_id String  @id @default(uuid())
  team_id        String?
  user_id        String?
  role_name      String? @db.VarChar(50)
  teams          teams?  @relation(fields: [team_id], references: [team_id], onDelete: NoAction, onUpdate: NoAction)
  users          users?  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model teams {
  team_id                      String                         @id @default(uuid())
  team_name                    String                         @db.VarChar(255)
  team_author_id               String?
  objective                    String?
  profile_pic_link             String?
  achievements                 achievements[]
  team_member_roles            team_member_roles[]
  users                        users?                         @relation(fields: [team_author_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  team_project_record          team_project_record[]
  team_request_response_record team_request_response_record[]
}

model user_interests {
  user_id     String
  interest_id String
  interests   interests @relation(fields: [interest_id], references: [interest_id], onDelete: NoAction, onUpdate: NoAction)
  users       users     @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, interest_id])
}

model user_skills {
  user_id  String
  skill_id String
  skills   skills @relation(fields: [skill_id], references: [skill_id], onDelete: NoAction, onUpdate: NoAction)
  users    users  @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)

  @@id([user_id, skill_id])
}

model users {
  user_id                                                                            String                          @id @default(uuid())
  full_name                                                                          String?                         @db.VarChar(255)
  role_id                                                                            String?
  email                                                                              String                          @unique @db.VarChar(255)
  phone_number                                                                       String?                         @db.VarChar(20)
  username                                                                           String                          @unique @db.VarChar(50)
  password                                                                           String                          @db.VarChar(255)
  refreshToken                                                                       String?
  date_of_birth                                                                      DateTime?                       @db.Date
  address                                                                            String?
  profile_picture_link                                                               String?
  institution_id                                                                     String?
  team_id                                                                            String?
  answers                                                                            answers[]
  collaboration_request_reviews_collaboration_request_reviews_collaborator_idTousers collaboration_request_reviews[] @relation("collaboration_request_reviews_collaborator_idTousers")
  collaboration_request_reviews_collaboration_request_reviews_reviewer_idTousers     collaboration_request_reviews[] @relation("collaboration_request_reviews_reviewer_idTousers")
  collaboration_requests                                                             collaboration_requests[]
  comments                                                                           comments[]
  ideas                                                                              ideas[]

  issues                       issues[]
  room_member_roles            room_member[]
  room_task_list               room_task_list[]
  team_member_roles            team_member_roles[]
  teams                        teams[]
  user_interests               user_interests[]
  user_skills                  user_skills[]
  roles                        roles?                         @relation(fields: [role_id], references: [role_id], onDelete: NoAction, onUpdate: NoAction)
  votes                        votes[]
  InstitutionVerification      InstitutionVerification[]
  user_project_track           user_project_track[]
  team_request_response_record team_request_response_record[]
  idea_impressions             idea_impressions[]
  project_impressions          project_impressions[]
  rooms                        rooms[]
  update                       update[]
  user_achievements            user_achievements[]
}

model votes {
  vote_id   String    @id @default(uuid())
  user_id   String?
  parent_id String?
  vote_type String?   @db.VarChar(10)
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  users     users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
}

model InstitutionVerification {
  id                 String       @id @default(uuid())
  institutionId      String
  userId             String
  verificationStatus Boolean      @default(false)
  studentId          String?
  institution        institutions @relation(fields: [institutionId], references: [institution_id])
  user               users        @relation(fields: [userId], references: [user_id])
}

model team_request_response_record {
  id                    String   @id @default(uuid())
  team_id               String
  team_author_id        String
  url                   String
  status                Boolean
  res_applicant_user_id String?
  res_status            Boolean?
  teams                 teams    @relation(fields: [team_id], references: [team_id])
  users                 users?   @relation(fields: [res_applicant_user_id], references: [user_id])
}

model team_project_record {
  id         String   @id @default(uuid())
  team_id    String
  project_id String
  teams      teams    @relation(fields: [team_id], references: [team_id])
  projects   projects @relation(fields: [project_id], references: [project_id])
}

model user_project_track {
  id         String   @id @default(uuid())
  user_id    String
  project_id String
  user       users    @relation(fields: [user_id], references: [user_id])
  project    projects @relation(fields: [project_id], references: [project_id])
}

model components {
  id                      String                    @id @default(uuid())
  name                    String
  image_link              String
  project_components_used project_components_used[]
}

model project_components_used {
  id           String     @id @default(uuid())
  component_id String
  project_id   String
  components   components @relation(fields: [component_id], references: [id])
  project      projects   @relation(fields: [project_id], references: [project_id])
}

model project_used_language {
  id          String     @id @default(uuid())
  project_id  String?
  language_id String?
  projects    projects?  @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  language    languages? @relation(fields: [language_id], references: [language_id], onDelete: NoAction, onUpdate: NoAction)
}

model project_used_software {
  id          String    @id @default(uuid())
  project_id  String?
  software_id String?
  projects    projects? @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
  software    software? @relation(fields: [software_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model idea_impressions {
  id        String    @id @default(uuid())
  user_id   String?
  idea_id   String?
  like      Boolean?
  timestamp DateTime? @default(now()) @db.Timestamp(6)
  users     users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  ideas     ideas?    @relation(fields: [idea_id], references: [idea_id], onDelete: NoAction, onUpdate: NoAction)
}

model project_impressions {
  id         String    @id @default(uuid())
  user_id    String?
  project_id String?
  like       Boolean?
  timestamp  DateTime? @default(now()) @db.Timestamp(6)
  users      users?    @relation(fields: [user_id], references: [user_id], onDelete: NoAction, onUpdate: NoAction)
  projects   projects? @relation(fields: [project_id], references: [project_id], onDelete: NoAction, onUpdate: NoAction)
}

model idea_comments {
  id         String   @id @default(uuid())
  comment_id String
  idea_id    String
  comments   comments @relation(fields: [comment_id], references: [comment_id])
  ideas      ideas    @relation(fields: [idea_id], references: [idea_id])
}

model room_update_table {
  id          String  @id @default(uuid())
  description String?
}

model update {
  id             String   @id @default(uuid())
  room_id        String?
  text           String?
  image_link     String[]
  video_link     String[]
  author_id      String?
  room_details   rooms?   @relation(fields: [room_id], references: [room_id])
  author_details users?   @relation(fields: [author_id], references: [user_id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model init_feature_list {
  id          String @id @default(uuid())
  title       String
  description String
  room_id     String
  rooms       rooms  @relation(fields: [room_id], references: [room_id])
}

model New_Project_table {
  id                 String   @id @default(uuid())
  roomId             String
  room               rooms    @relation(fields: [roomId], references: [room_id])
  projectType        String?
  projectName        String?
  projectDescription String?
  mentor             String?
  reference          String?
  demoLink           String?
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  softwareTechnologies  softwareTechnologies[]
  hardwareComponents    HardwareComponent[]
  features              new_Feature[]
  technicalRequirements TechnicalRequirement?
  milestones            Milestone[]
  deliverables          Deliverable[]
  budget                Budget?
  risks                 Risk[]
  successMetrics        SuccessMetric[]
  roomsRoom_id          String?
}

model HardwareComponent {
  id         String            @id @default(uuid())
  name       String
  image_link String?
  quantity   Int?
  projectId  String
  project    New_Project_table @relation(fields: [projectId], references: [id])
}

model softwareTechnologies {
  id         String            @id @default(uuid())
  name       String
  image_link String?
  projectId  String
  project    New_Project_table @relation(fields: [projectId], references: [id])
}

model new_Feature {
  id                String              @id @default(uuid())
  inputId           String?
  processId         String?
  outputId          String?
  projectID         String?
  inputs            feature_subSectiom? @relation("inputs", fields: [inputId], references: [id])
  outputs           feature_subSectiom? @relation("output", fields: [outputId], references: [id])
  processes         feature_subSectiom? @relation("processes", fields: [processId], references: [id])
  New_Project_table New_Project_table?  @relation(fields: [projectID], references: [id])
}

model feature_subSectiom {
  id      String  @id @default(uuid())
  text    String?
  mediaId String?
  medias  media?  @relation(fields: [mediaId], references: [id])

  inputFeatures   new_Feature[] @relation("inputs")
  outputFeatures  new_Feature[] @relation("output")
  processFeatures new_Feature[] @relation("processes")
}

model media {
  id                 String               @id @default(uuid())
  images             String[]
  videos             String[]
  feature_subSectiom feature_subSectiom[]
}

model TechnicalRequirement {
  id                   String            @id @default(uuid())
  programmingLanguages String[]
  frameworks           String[]
  databases            String[]
  infrastructure       String[]
  tools                String[]
  projectId            String            @unique
  project              New_Project_table @relation(fields: [projectId], references: [id])
}

model Milestone {
  id          String            @id @default(uuid())
  name        String
  description String
  dueDate     DateTime
  projectId   String
  project     New_Project_table @relation(fields: [projectId], references: [id])
}

model Deliverable {
  id          String            @id @default(uuid())
  name        String
  description String
  type        String
  projectId   String
  project     New_Project_table @relation(fields: [projectId], references: [id])
}

model Budget {
  id         String            @id @default(uuid())
  projectId  String            @unique
  project    New_Project_table @relation(fields: [projectId], references: [id])
  categories BudgetCategory[]
}

model BudgetCategory {
  id       String  @id @default(uuid())
  name     String?
  amount   Float?
  budgetId String
  budget   Budget  @relation(fields: [budgetId], references: [id])
}

model Risk {
  id          String            @id @default(uuid())
  description String
  impact      String
  mitigation  String
  projectId   String
  project     New_Project_table @relation(fields: [projectId], references: [id])
}

model SuccessMetric {
  id          String            @id @default(uuid())
  name        String
  description String
  targetValue String
  projectId   String
  project     New_Project_table @relation(fields: [projectId], references: [id])
}

model test {
  id String @id @default(uuid())
}

model user_achievements {
  id          String    @id @default(uuid())
  user_id     String
  title       String
  description String
  date        DateTime? @db.Date
  images      String[]
  users       users     @relation(references: [user_id], fields: [user_id])
}

model Developer {
  id             String                 @id @default(uuid())
  name           String
  profilePicture String
  title          String
  bio            String
  email          String                 @unique
  phone          String?
  location       String
  linkedinUrl    String
  githubUrl      String
  twitterUrl     String?
  skills         Developer_Skill[]
  projects       Developer_Project[]
  experiences    Developer_Experience[]
  education      Developer_Education[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model Developer_Skill {
  id          String              @id @default(uuid())
  name        String
  type        Developer_SkillType
  developer   Developer           @relation(fields: [developerId], references: [id])
  developerId String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([name, developerId])
}

enum Developer_SkillType {
  TECHNICAL
  SOFT
}

model Developer_Project {
  id           String                        @id @default(uuid())
  name         String
  description  String
  role         String
  demoLink     String?
  githubLink   String?
  developer    Developer                     @relation(fields: [developerId], references: [id])
  developerId  String
  technologies Developer_ProjectTechnology[]
  createdAt    DateTime                      @default(now())
  updatedAt    DateTime                      @updatedAt
}

model Developer_ProjectTechnology {
  id        String            @id @default(uuid())
  name      String
  project   Developer_Project @relation(fields: [projectId], references: [id])
  projectId String
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt

  @@unique([name, projectId])
}

model Developer_Experience {
  id               String                           @id @default(uuid())
  jobTitle         String
  company          String
  startDate        DateTime
  endDate          DateTime?
  responsibilities String
  developer        Developer                        @relation(fields: [developerId], references: [id])
  developerId      String
  technologies     Developer_ExperienceTechnology[]
  createdAt        DateTime                         @default(now())
  updatedAt        DateTime                         @updatedAt
}

model Developer_ExperienceTechnology {
  id           String               @id @default(uuid())
  name         String
  experience   Developer_Experience @relation(fields: [experienceId], references: [id])
  experienceId String
  createdAt    DateTime             @default(now())
  updatedAt    DateTime             @updatedAt

  @@unique([name, experienceId])
}

model Developer_Education {
  id              String                     @id @default(uuid())
  degree          String
  institution     String
  graduationDate  DateTime
  developer       Developer                  @relation(fields: [developerId], references: [id])
  developerId     String
  relevantCourses Developer_RelevantCourse[]
  createdAt       DateTime                   @default(now())
  updatedAt       DateTime                   @updatedAt
}

model Developer_RelevantCourse {
  id          String              @id @default(uuid())
  name        String
  education   Developer_Education @relation(fields: [educationId], references: [id])
  educationId String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt

  @@unique([name, educationId])
}
